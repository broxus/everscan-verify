// this example uses the binary generated by the rust project in the parent directory
// said project is released on GitHub, and the correct URL is constructed based on
// the target operating system and the version in package.json

// your binary could be downloaded from any URL and could use any logic you want
// to construct said URL. You could even A/B test two different binary distribution
// solutions!

const {Binary} = require("binary-install");
const os = require("os");
const {join} = require("path");
const cTable = require("console.table");

const error = msg => {
    console.error(msg);
    process.exit(1);
};

const {version, name, repository} = require("./package.json");

const supportedPlatforms = [
    {
        TYPE: "Windows_NT",
        ARCHITECTURE: "x64",
        RUST_TARGET: "x86_64-pc-windows-msvc"
    },
    {
        TYPE: "Linux",
        ARCHITECTURE: "x64",
        RUST_TARGET: "x86_64-unknown-linux-musl"
    },
    {
        TYPE: "Darwin",
        ARCHITECTURE: "x64",
        RUST_TARGET: "x86_64-apple-darwin"
    },
    {
        TYPE: "Darwin",
        ARCHITECTURE: "arm64",
        RUST_TARGET: "x86_64-apple-darwin"
    }
];

const getPlatform = () => {
    const type = os.type();
    const architecture = os.arch();

    for (let index in supportedPlatforms) {
        let supportedPlatform = supportedPlatforms[index];
        if (
            type === supportedPlatform.TYPE &&
            architecture === supportedPlatform.ARCHITECTURE
        ) {
            return supportedPlatform.RUST_TARGET;
        }
    }

    error(
        `Platform with type "${type}" and architecture "${architecture}" is not supported by ${name}.\nYour system must be one of the following:\n\n${cTable.getTable(
            supportedPlatforms
        )}`
    );
};

const getBinary = () => {
    const platform = getPlatform();
    // the url for this binary is constructed from values in `package.json`
    // https://github.com/broxus/everscan-verify/releases/download/v1.0.2/everscan-verify-v1.0.2-x86_64-apple-darwin.tar.gz
    const url = `${repository.url}/releases/download/v${version}/${name}-v${version}-${platform}.tar.gz`;
    return new Binary(name, url);
};

const run = () => {
    const binary = getBinary();
    binary.run();
};

const install = () => {
    const binary = getBinary();
    binary.install();
};

module.exports = {
    install,
    run
};
